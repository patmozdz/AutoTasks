version: '3.8'

services:
  web:
    build: .
    command: sh -c "python manage.py migrate && gunicorn AutoTasks_backend.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/app  # Mounts the current directory into /app in the container
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - database
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - INTERNAL_TOKEN=${INTERNAL_TOKEN}
      # Below is temporary, use Azure managed identity when deploying container to Azure
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REGISTRATION_CODE=${REGISTRATION_CODE}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx:/etc/nginx/conf.d
    ports:
      - "80:80"  # Maps port 80 on the host to port 80 in the container
    depends_on:
      - web


  # Below is for developement, remove for production (if using for developement, don't forget to change endpoint url in discord_bot.py)
  # ngrok:
  #   image: ngrok/ngrok
  #   ports:
  #     - "4040:4040"  # Web interface (for status and stuff) can be looked at by going to http://localhost:4040 on the host machine's browser
  #   command: http --domain=lemming-feasible-monitor.ngrok-free.app web:8000  # Don't use ngrok at start because the image's entrypoint is the ngrok executable itself. Use web:8000 to access port 8000 of web, which is running the Django server (the ngrok container does not have the Django server on port 8000)
  #   depends_on:
  #     - web
  #   environment:
  #     - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
  # Above is for developement

  celery:
    build: .
    command: celery -A AutoTasks_backend worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - DISCORD_BOT_BROKER_URL=redis://redis:6379/1
      # Below is temporary, use Azure managed identity when deploying container to Azure
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  celerybeat:
    build: .
    command: celery -A AutoTasks_backend beat --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - DISCORD_BOT_BROKER_URL=redis://redis:6379/1
      # Below is temporary, use Azure managed identity when deploying container to Azure
      # Celery beat also needs access to env variables because it needs to know about the task's signature,
      # which includes the function names and arguments. Since the API key is an argument, it needs to know the env var API key.
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  redis:
    image: redis:latest
    ports:
      - "6379:6379"

  discord_bot:
    build: .
    command: python scripts/discord_bot.py
    volumes:
      - ./scripts:/app/scripts
    depends_on:
      - redis
    environment:
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}  # Add other necessary environment variables
      - DISCORD_BOT_BROKER_URL=redis://redis:6379/1
      - INTERNAL_TOKEN=${INTERNAL_TOKEN}
  
  database:
    image: postgres
    environment:
      # The PostgreSQL Docker image will create a default database based on the info below
      POSTGRES_DB: autotasks_database
      POSTGRES_USER: django_user  # django_user is set as the postgres superuser, might want to change this for principle of least privelage
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/


volumes:
  postgres_data: